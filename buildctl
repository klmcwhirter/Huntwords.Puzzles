#!/bin/bash
#*------------------------------------------------------------------------------*

if [ $(basename "${PWD}") != "puzzles" ]
then
  cd puzzles
fi

#*------------------------------------------------------------------------------*
#* Constants
CMD=../$(basename $0)
PROJROOT=$(dirname ${CMD})

# Name of the Docker Hub repository
REPO=klmcwhirter

# Base name of the Docker image to build
IMAGEBASE=puzzle-service

# Name of the executable
EXE=puzzles

# Name for the container to start
CONTAINER=con${IMAGEBASE}

# Port # to map locally when starting the container
PORT=5000

# Command to use to scp to the Raspberry Pi 3 to which scp will copy
RPI3SCP=klmcwpi3scp

# Path on the Raspberry Pi 3 to which scp will copy
RPI3PATH=/home/klmcw/src/github.com/klmcwhirter

#*------------------------------------------------------------------------------*
#* Variables

arch=`echo $2 | sed 's/.*\(arm\).*/\1/'`
if [ "${arch}" = "arm" ]
then
  TARGET=arm32v7
else
  TARGET=x86_64
fi
dockerfile="Dockerfile.${TARGET}"

version=$(jq -r '.version' ${PROJROOT}/package.json)

IMAGE=${IMAGEBASE}-${TARGET}

cmd=$1
runtime=$2
if [ ! -z "$runtime" ]
then
    runtimeopts="-r $2"
fi

#*------------------------------------------------------------------------------*
function log
{
  timestamp=$(date "+%Y/%m/%d %H:%M:%S")
  echo ">>> ${timestamp}: $*"
}
#*---------------------------------------------------------------------------*
#* M A I N  P R O G R A M
#*---------------------------------------------------------------------------*

log "$0 $*"

case $cmd in
'build')
  ${CMD} clean $2
  dotnet restore $runtimeopts
  dotnet build $runtimeopts
  ${CMD} build-db $2
  ;;
'build-db')
  dotnet ef database update
  ./Data/loadsql.sh Data/V1.1.0__add_animals.sql
  ./Data/loadsql.sh Data/V1.1.1__add_flowers.sql
  ./Data/loadsql.sh Data/V1.1.2__add_fruit.sql
  ;;
'clean')
  rm -fr bin obj dist
  ;;
'publish')
  ${CMD} build $2
  dotnet publish --self-contained $runtimeopts
  mkdir -p dist
  ROOT=${PWD}
  mv bin/Debug/netcoreapp2.0/$runtime/publish ${ROOT}/dist/${IMAGEBASE}
  cp bin/Debug/netcoreapp2.0/puzzles.sqlite ${ROOT}/dist/${IMAGEBASE}
  if [ "${TARGET}" = "arm32v7" ]
  then
    log "Copying ${PROJROOT}/SQLitePCL.raw/linux/armhf/libe_sqlite3.so ${ROOT}/dist/${IMAGEBASE}"
    cp ${PROJROOT}/SQLitePCL.raw/linux/armhf/libe_sqlite3.so ${ROOT}/dist/${IMAGEBASE}
    if [ -f "${ROOT}/dist/${IMAGEBASE}/libe_sqlite3.dylib" ]
    then
      log "Removing ${ROOT}/dist/${IMAGEBASE}/libe_sqlite3.dylib"
      rm -f ${ROOT}/dist/${IMAGEBASE}/libe_sqlite3.dylib
    fi
  fi
  chmod +x ${ROOT}/dist/${IMAGEBASE}/${EXE}
  cd ../..
  ;;
'docker-build')
  ${CMD} build $2
  ${CMD} docker-rmi $2

  log "BUILDING IMAGE ${REPO}/${IMAGE}:${version}"
  docker build --rm --force-rm -f $dockerfile -t ${REPO}/${IMAGE}:${version} .
  ${CMD} k8s-replace-version
  ;;
'docker-rmi')
  ${CMD} stop $2

  docker inspect ${REPO}/${IMAGE}:${version} >/dev/null 2>&1
  if [ $? -eq 0 ]
  then
    log "REMOVING IMAGE ${REPO}/${IMAGE}:${version}"
    docker rmi ${REPO}/${IMAGE}:${version}
  fi
  ;;
'docker-push')
  log docker push klmcwhirter/${IMAGE}:${version}
  docker push klmcwhirter/${IMAGE}:${version}
  ;;
'docker-start')
  log "STARTING ${CONTAINER} on port ${PORT}"
  docker run -d --name ${CONTAINER} -p ${PORT}:5000 ${REPO}/${IMAGE}:${version}
  ;;
'docker-stop')
  docker inspect ${CONTAINER} >/dev/null 2>&1
  if [ $? -eq 0 ]
  then
    log "STOPPING and REMOVING CONTAINER ${CONTAINER}"
    docker stop ${CONTAINER}
    docker rm -v ${CONTAINER}
  fi
  ;;
'docker-push')
  docker push ${REPO}/${IMAGE}:${version}
  ;;
'k8s-replace-version')
  sed "s/@VERSION@/${version}/g;s/@TARGET@/${TARGET}/g" ${PROJROOT}/k8s/dev/puzzle-service-deployment.yml.in >${PROJROOT}/k8s/dev/puzzle-service-deployment.yml
  ;;
esac

log "Done - $*."

#*------------------------------------------------------------------------------*
